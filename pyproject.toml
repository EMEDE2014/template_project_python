[project]
name = "fastapi-zero"
version = "0.1.0"
description = ""
authors = [{ name = "Your Name", email = "you@example.com" }]
readme = "README.md"
requires-python = ">=3.12, <3.13"
dependencies = [
    "fastapi[standard] (>=0.116.1,<0.117.0)",
    "shell (>=1.0.1,<2.0.0)",
    "pydantic[email] (>=2.11.9,<3.0.0)",
    "taskipy (>=1.14.1,<2.0.0)",
]


[tool.poetry]
packages = [{ include = "fastapi_zero", from = "src" }]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.group.dev.dependencies]
ruff = "^0.12.7"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
taskipy = "^1.14.1"

[tool.pytest.ini_options]
pythonpath = [
    "src",
] ## Representa do diretório src do pacote do seu projeto, que é onde o código-fonte do seu projeto está localizado. como o pytest precisa saber onde encontrar o código que você deseja testar.
addopts = [
    '-p no:warnings',
    '--cov=src',
] ## Adicionar funcionalidade para o teste

[tool.ruff]
## Para excluir problemas com extend-excluide
exclude = ["venv/", "build/", "dist/", "tests/", "*.bak"]
line-length = 79

[tool.ruff.lint]
preview = true
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

[tool.ruff.format]
preview = true
quote-style = 'single'

[tool.taskipy.tasks]
run = 'fastapi dev src/fastapi_zero/app.py'

pre_test = 'task lint'
test = 'pytest --cov=gato -vv'
post_test = 'coverage html'

lint = 'ruff check . && ruff check . --diff'
format = 'ruff check . --fix && ruff format'
